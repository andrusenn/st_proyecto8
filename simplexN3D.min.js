const F3=1/3,G3=1/6,fastFloor=t=>0|Math.floor(t),grad3=new Float64Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]);function createNoise3D(t=Math.random){const o=buildPermutationTable(t),e=new Float64Array(o).map(t=>grad3[t%12*3]),r=new Float64Array(o).map(t=>grad3[t%12*3+1]),a=new Float64Array(o).map(t=>grad3[t%12*3+2]);return function(t,n,l){let s,f,c,i;const G=(t+n+l)*F3,u=fastFloor(t+G),F=fastFloor(n+G),d=fastFloor(l+G),m=(u+F+d)*G3,w=t-(u-m),y=n-(F-m),A=l-(d-m);let b,g,p,h,M,P;w>=y?y>=A?(b=1,g=0,p=0,h=1,M=1,P=0):w>=A?(b=1,g=0,p=0,h=1,M=0,P=1):(b=0,g=0,p=1,h=1,M=0,P=1):y<A?(b=0,g=0,p=1,h=0,M=1,P=1):w<A?(b=0,g=1,p=0,h=0,M=1,P=1):(b=0,g=1,p=0,h=1,M=1,P=0);const T=w-b+G3,D=y-g+G3,N=A-p+G3,U=w-h+2*G3,j=y-M+2*G3,k=A-P+2*G3,q=w-1+3*G3,v=y-1+3*G3,x=A-1+3*G3,z=255&u,B=255&F,C=255&d;let E=.6-w*w-y*y-A*A;if(E<0)s=0;else{const t=z+o[B+o[C]];s=(E*=E)*E*(e[t]*w+r[t]*y+a[t]*A)}let H=.6-T*T-D*D-N*N;if(H<0)f=0;else{const t=z+b+o[B+g+o[C+p]];f=(H*=H)*H*(e[t]*T+r[t]*D+a[t]*N)}let I=.6-U*U-j*j-k*k;if(I<0)c=0;else{const t=z+h+o[B+M+o[C+P]];c=(I*=I)*I*(e[t]*U+r[t]*j+a[t]*k)}let J=.6-q*q-v*v-x*x;if(J<0)i=0;else{const t=z+1+o[B+1+o[C+1]];i=(J*=J)*J*(e[t]*q+r[t]*v+a[t]*x)}return 32*(s+f+c+i)}}function buildPermutationTable(t){const o=new Uint8Array(512);for(let t=0;t<256;t++)o[t]=t;for(let e=0;e<255;e++){const r=e+~~(t()*(256-e)),a=o[e];o[e]=o[r],o[r]=a}for(let t=256;t<512;t++)o[t]=o[t-256];return o}